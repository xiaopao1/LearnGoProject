package main

import (
	"bytes"
	"crypto/md5"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"strconv"
	"strings"
)

type DictRequest struct {
	TransType string `json:"trans_type"`
	Source    string `json:"source"`
}
type VolcDictRequest struct {
	Source         string   `json:"source"`
	words          []string `json:"words"`
	SourceLanguage string   `json:"source_language"`
	TargetLanguage string   `json:"target_language"`
}
type BaiduResult struct {
	From        string `json:"from"`
	To          string `json:"to"`
	TransResult []struct {
		Src string `json:"src"`
		Dst string `json:"dst"`
	} `json:"trans_result"`
}
type AutoGenerated struct {
	Rc   int `json:"rc"`
	Wiki struct {
		KnownInLaguages int `json:"known_in_laguages"`
		Description     struct {
			Source string      `json:"source"`
			Target interface{} `json:"target"`
		} `json:"description"`
		ID   string `json:"id"`
		Item struct {
			Source string `json:"source"`
			Target string `json:"target"`
		} `json:"item"`
		ImageURL  string `json:"image_url"`
		IsSubject string `json:"is_subject"`
		Sitelink  string `json:"sitelink"`
	} `json:"wiki"`
	Dictionary struct {
		Prons struct {
			EnUs string `json:"en-us"`
			En   string `json:"en"`
		} `json:"prons"`
		Explanations []string      `json:"explanations"`
		Synonym      []string      `json:"synonym"`
		Antonym      []interface{} `json:"antonym"`
		WqxExample   [][]string    `json:"wqx_example"`
		Entry        string        `json:"entry"`
		Type         string        `json:"type"`
		Related      []interface{} `json:"related"`
		Source       string        `json:"source"`
	} `json:"dictionary"`
}
type VolcResult struct {
	Details []struct {
		Detail string `json:"detail"`
		Extra  string `json:"extra"`
	} `json:"details"`
	BaseResp struct {
		StatusCode    int    `json:"status_code"`
		StatusMessage string `json:"status_message"`
	} `json:"base_resp"`
}

func query(word string, re chan string) {
	client := &http.Client{}
	request := DictRequest{"en2zh", word}
	//var data = strings.NewReader(`{"trans_type":"en2zh","source":"jack"}`)
	buf, err := json.Marshal(request)
	if err != nil {
		log.Fatal(err)
	}
	data := bytes.NewReader(buf)
	req, err := http.NewRequest("POST", "https://api.interpreter.caiyunai.com/v1/dict", data)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("authority", "api.interpreter.caiyunai.com")
	req.Header.Set("accept", "application/json, text/plain, */*")
	req.Header.Set("accept-language", "zh-CN,zh;q=0.9")
	req.Header.Set("app-name", "xy")
	req.Header.Set("content-type", "application/json;charset=UTF-8")
	req.Header.Set("origin", "https://fanyi.caiyunapp.com")
	req.Header.Set("os-type", "web")
	req.Header.Set("referer", "https://fanyi.caiyunapp.com/")
	req.Header.Set("sec-ch-ua", `".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"`)
	req.Header.Set("sec-ch-ua-mobile", "?0")
	req.Header.Set("sec-ch-ua-platform", `"Windows"`)
	req.Header.Set("sec-fetch-dest", "empty")
	req.Header.Set("sec-fetch-mode", "cors")
	req.Header.Set("sec-fetch-site", "cross-site")
	req.Header.Set("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36")
	req.Header.Set("x-authorization", "token:qgemv4jr1y38jyq6vhvi")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	bodyText, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	var autoGenerated AutoGenerated
	err = json.Unmarshal(bodyText, &autoGenerated)
	if err != nil {
		log.Fatal(err)
	}
	//}
	var outputResult string
	outputResult = "from 彩云小译:"
	outputResult = outputResult + autoGenerated.Dictionary.Prons.En + autoGenerated.Dictionary.Prons.EnUs
	for _, item := range autoGenerated.Dictionary.Explanations {
		outputResult += item
	}
	re <- outputResult
}

// 回来的json很简单，但是有一串很长的detail，不知道如何解析
func query1(word string, re chan string) {

	client := &http.Client{}
	var data = strings.NewReader(`{"source":"youdao","words":["hello"],"source_language":"en","target_language":"zh"}`)
	req, err := http.NewRequest("POST", "https://translate.volcengine.com/web/dict/detail/v1/?msToken=&X-Bogus=DFSzswVuQDV5J1l7S49M2M9WX7r-&_signature=_02B4Z6wo00001xe4JOgAAIDDl7reqBcHrtcXuCBAAKZBIB6kNyKL1W6lCW68duT8AcZchTBTpVkHCk3mQMWmgorG68teC8NVIb3T4HlU5mRWgsH9JktFTCgJ5xl-NiO46cArqWKR--Ra2Pptb2", data)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("authority", "translate.volcengine.com")
	req.Header.Set("accept", "application/json, text/plain, */*")
	req.Header.Set("accept-language", "zh-CN,zh;q=0.9")
	req.Header.Set("content-type", "application/json")
	req.Header.Set("cookie", "x-jupiter-uuid=16751815983457360; i18next=zh-CN; s_v_web_id=verify_ldkfved3_dVPLRlsn_sMav_4cRu_9owc_YrXxBlPTVT06; ttcid=df5d32c9442446068d6966b3cac8d85613; tt_scid=SBSHN1QhfIzewpHU6Hce7XtJu8aqDdYC3f4NEyEH2h4y8.F7yckuGsobQ8wekV39fa7e")
	req.Header.Set("origin", "https://translate.volcengine.com")
	req.Header.Set("referer", "https://translate.volcengine.com/?category=&home_language=zh&source_language=detect&target_language=zh&text=result")
	req.Header.Set("sec-ch-ua", `".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"`)
	req.Header.Set("sec-ch-ua-mobile", "?0")
	req.Header.Set("sec-ch-ua-platform", `"Windows"`)
	req.Header.Set("sec-fetch-dest", "empty")
	req.Header.Set("sec-fetch-mode", "cors")
	req.Header.Set("sec-fetch-site", "same-origin")
	req.Header.Set("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	bodyText, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%s\n", bodyText)
}
func query2(word string, re chan string) {
	appid := "20230201001545974"
	secretKey := "M0MUrnjoQtmWwnB4a877"
	myurl := "/api/trans/vip/translate"
	fromLang := "auto"
	toLang := "zh"
	salt := rand.Intn(32768) + 32768
	q := word
	sign := appid + q + strconv.Itoa(salt) + secretKey
	h := md5.New()
	io.WriteString(h, sign)
	sign = fmt.Sprintf("%x", h.Sum(nil))
	//sign = string(h.Sum(nil))
	myurl = myurl + "?appid=" + appid + "&q=" + q + "&from=" + fromLang + "&to=" + toLang + "&salt=" + strconv.Itoa(salt) + "&sign=" + sign
	resp, err := http.Get("http://api.fanyi.baidu.com" + myurl)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	bodyText, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	var baiduResult BaiduResult
	err = json.Unmarshal(bodyText, &baiduResult)
	if err != nil {
		log.Fatal(err)
	}
	var resultStr string
	for _, item := range baiduResult.TransResult {
		resultStr += item.Dst
	}
	re <- "from 百度翻译:" + resultStr
}
func main() {
	var s string
	result := make(chan string)
	for {
		_, err := fmt.Scanf("%s", &s)
		if err != nil {
			log.Fatal(err)
		}
		go query(s, result)
		go query2(s, result)
		go func() {
			for i := range result {
				fmt.Println(i)
			}
		}()

	}
}
